---
name: Release

on:
  push:
    branches: [master, alpha, beta]

# Only allow one release workflow to execute at a time, since each release
# workflow uses shared resources (git tags, package registries)
concurrency:
  group: ${{ github.workflow }}

# semantic-release is built around the following idea:
#
# > A release consist in running test, defining the version then releasing
#
# - https://github.com/semantic-release/semantic-release/issues/753#issuecomment-384689034
#
# So we perform the following actions from the context of semantic-release plugins:
#
# - compile all target binaries
# - docker build and publish
# - npm publish
# - create GitHub release

env:
  BINARY_NAME: monorepo
  RUST_BACKTRACE: 1

jobs:
  get-next-version:
    name: Calculate next release
    runs-on: ubuntu-latest
    outputs:
      new-release-published: ${{ steps.get-next-version.outputs.new-release-published }}
      new-release-version: ${{ steps.get-next-version.outputs.new-release-version }}

    steps:
      - name: Calculate next semantic-release version
        id: get-next-version
        uses: semantic-release-action/next-release-version@v2

  test:
    name: Cargo test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        id: rust-toolchain
        with:
          toolchain: stable

      - name: Cache cargo
        uses: actions/cache@v3
        id: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Cargo test
        run: cargo test

  ### Compile release artifacts
  build-release:
    name: Build CLI ${{ matrix.build.target }}
    runs-on: ${{ matrix.build.os }}
    needs:
      - get-next-version
    env:
      CARGO: cargo

    strategy:
      matrix:
        build:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            cross: false
          - os: ubuntu-latest
            target: i686-unknown-linux-musl
            cross: true
          - os: macOS-latest
            target: x86_64-apple-darwin
            cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            cross: true
          - os: macOS-latest
            target: aarch64-apple-darwin
            cross: true

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        id: rust-toolchain
        with:
          toolchain: stable
          target: ${{ matrix.build.target }}

      - name: Install cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - name: Cache cargo
        uses: actions/cache@v3
        id: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install semantic-release-cargo
        if: needs.get-next-version.outputs.new-release-published == 'true'
        uses: taiki-e/install-action@v2
        with:
          tool: semantic-release-cargo@2

      - name: Prepare semantic-release for Rust
        if: needs.get-next-version.outputs.new-release-published == 'true'
        run: semantic-release-cargo prepare ${{ needs.get-next-version.outputs.new-release-version }}

      - name: Configure cross
        if: matrix.build.cross
        run: echo "CARGO=cross" >> "$GITHUB_ENV"

      - name: Compile release binary
        run: ${{ env.CARGO }} build --bin monorepo --release --target ${{ matrix.build.target }} --verbose

      - name: Create release archive
        run: |
          mkdir dist
          mkdir -p builds/typescript-tools-${{ matrix.build.target }}
          cp target/${{ matrix.build.target }}/release/monorepo builds/typescript-tools-${{ matrix.build.target }}/
          tar -C builds -czvf dist/typescript-tools-${{ matrix.build.target }}.tar.gz typescript-tools-${{ matrix.build.target }}

      # Create a checksum of the tar archive for manual checksum verification of the archive before extraction.
      - name: Create tar checksum
        run: shasum --algorithm 256 typescript-tools-${{ matrix.build.target }}.tar.gz > typescript-tools-${{ matrix.build.target }}-SHASUMS256.txt
        working-directory: ./dist

      # Create a checksum of the binary for automatic checksum verification in the post-install hook. In this code
      # path, the tar archive is streamed from the GitHub release page and the stream is untarred before a file
      # is ever written to disk, to minimize disk usage. This makes it impossible to validate the checksum of the
      # entire tar archive, so we calculate a checksum of the untarred binary instead.
      - name: Create binary checksum
        run: shasum --algorithm 256 --binary monorepo | tee ../../dist/typescript-tools-${{ matrix.build.target }}-binary-SHASUMS256.txt
        working-directory: ./builds/typescript-tools-${{ matrix.build.target }}

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.build.target }}
          path: |
            dist/typescript-tools-${{ matrix.build.target }}.tar.gz
            dist/typescript-tools-${{ matrix.build.target }}-binary-SHASUMS256.txt
            dist/typescript-tools-${{ matrix.build.target }}-SHASUMS256.txt
          if-no-files-found: error
          retention-days: 1

  ### Perform the semantic-release
  release:
    runs-on: ubuntu-latest
    if: needs.get-next-version.outputs.new-release-published == 'true'
    name: Release
    needs:
      - build-release
      - get-next-version
      - test

    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        id: rust-toolchain
        with:
          toolchain: stable

      - name: Cache cargo
        uses: actions/cache@v3
        id: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: lts/*
          check-latest: true
          cache: npm

      - name: Cache npm dependencies
        uses: actions/cache@v3
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci --ignore-scripts --loglevel error

      - name: Download release artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Display downloaded release artifacts
        run: ls -R
        working-directory: dist

      - name: Combine checksums
        run: cat dist/**/typescript-tools-*-SHASUMS256.txt | tee npm/SHASUMS256.txt

      - name: Invoke semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release
